package aima.extra.probability.factory;

import java.lang.reflect.Constructor;
import java.math.BigDecimal;
import java.math.MathContext;
import java.math.RoundingMode;
import java.util.Objects;

import aima.extra.probability.ProbabilityNumber;

/**
 * ProbabilityFactory is a generic factory class for constructing instances of
 * the various ProbabilityNumber implementations.
 * 
 * @author Nagaraj Poti
 */
public class ProbabilityFactory<T extends ProbabilityNumber> {

	// Internal fields

	/**
	 * Constructors.
	 */
	final private Constructor<T> doubleConstructor;
	
	final private Constructor<T> bigDecimalConstructor;
	
	final private Constructor<T> mathContextConstructor;
	
	final private Constructor<T> conversionConstructor;
	
	/**
	 * Class type of the ProbabilityNumber implementation for which the factory
	 * is to be created.
	 */
	private Class<T> clazz; 

	// Constructor

	/**
	 * Initialize clazz with any class that extends ProbabilityNumber interface.
	 * 
	 * @param clazz
	 */
	protected ProbabilityFactory(Class<T> clazz) {
		this.clazz = Objects.requireNonNull(clazz, "ProbabilityNumber class type must be specified.");
		try {
			doubleConstructor = this.clazz.getDeclaredConstructor(Double.class);
			bigDecimalConstructor = this.clazz.getDeclaredConstructor(BigDecimal.class);
			mathContextConstructor = this.clazz.getDeclaredConstructor(BigDecimal.class, MathContext.class);
			conversionConstructor = this.clazz.getDeclaredConstructor(ProbabilityNumber.class);
		} catch (Exception ex) {
			throw new IllegalArgumentException(ex.getCause());
		}
	}

	// PUBLIC

	/**
	 * Static method to create instances of the desired specific factory class.
	 * 
	 * @param clazz
	 *            is the specific factory type.
	 * 
	 * @return new ProbabilityFactory of specified type.
	 */
	public static ProbabilityFactory<?> make(Class<? extends ProbabilityNumber> clazz) {
		return new ProbabilityFactory<>(clazz);
	}

	/**
	 * Create ProbabilityNumber instance by providing a value of Double type.
	 * 
	 * @param value
	 *            of Double type.
	 * 
	 * @return a new ProbabilityNumber instance.
	 */
	public ProbabilityNumber valueOf(Double value) {
		ProbabilityNumber output = null;
		try {
			output = doubleConstructor.newInstance(value);
		} catch (Exception ex) {
			throw new IllegalArgumentException(ex.getCause());
		}
		return output;
	}

	/**
	 * Create ProbabilityNumber instance by providing a value of BigDecimal
	 * type.
	 * 
	 * @param value
	 *            of BigDecimal type.
	 * 
	 * @return a new ProbabilityNumber instance.
	 */
	public ProbabilityNumber valueOf(BigDecimal value) {
		ProbabilityNumber output = null;
		try {
			output = bigDecimalConstructor.newInstance(value);
		} catch (Exception ex) {
			throw new IllegalArgumentException(ex.getCause());
		}
		return output;
	}

	/**
	 * Create ProbabilityNumber instance by providing a value of BigDecimal type
	 * and a MathContext setting.
	 * 
	 * @param value
	 *            of BigDecimal type.
	 * @param mc
	 *            MathContext to be associated with value.
	 * 
	 * @return a new ProbabilityNumber instance.
	 */
	public ProbabilityNumber valueOf(BigDecimal value, MathContext mc) {
		ProbabilityNumber output = null;
		try {
			output = mathContextConstructor.newInstance(value, mc);
		} catch (Exception ex) {
			throw new IllegalArgumentException(ex.getCause());
		}
		return output;
	}

	/**
	 * Create ProbabilityNumber instance by providing a value of BigDecimal type
	 * and a maximum precision setting for the provided value.
	 * 
	 * @param value
	 *            of BigDecimal type.
	 * @param precision
	 *            maximum precision of the ProbabilityNumber.
	 * 
	 * @return a new ProbabilityNumber instance.
	 */
	public ProbabilityNumber valueOf(BigDecimal value, int precision) {
		// Default RoundingMode setting is HALF_EVEN
		MathContext mc = new MathContext(precision, RoundingMode.HALF_EVEN);
		ProbabilityNumber output = null;
		try {
			output = mathContextConstructor.newInstance(value, mc);
		} catch (Exception ex) {
			throw new IllegalArgumentException(ex.getCause());
		}
		return output;
	}

	/**
	 * Convert a ProbabilityNumber instance to the specific implementation type
	 * generated by this factory instance.
	 * 
	 * @param that
	 *            ProbabilityNumber.
	 * 
	 * @return a new ProbabilityNumber instance of specific implementation type.
	 */
	public ProbabilityNumber convert(ProbabilityNumber that) {
		ProbabilityNumber output = null;
		try {
			output = conversionConstructor.newInstance(that);
		} catch (Exception ex) {
			throw new IllegalArgumentException(ex.getCause());
		}
		return output;
	}

	/**
	 * Check if all ProbabilityNumber instances constituting the iterable add up
	 * to one or not.
	 * 
	 * @param allProbabilities.
	 * 
	 * @return true if all probability values add upto one, false otherwise.
	 */
	public Boolean sumsToOne(Iterable<ProbabilityNumber> allProbabilities) {
		Boolean result = null;
		try {
			ProbabilityNumber dummyValue = bigDecimalConstructor.newInstance(BigDecimal.ZERO);
			result = dummyValue.sumsToOne(allProbabilities);
		} catch (Exception ex) {
			throw new IllegalArgumentException(ex.getCause());
		}
		return result;
	};
}